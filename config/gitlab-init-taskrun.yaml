apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gitlab-
  namespace: infra
spec:
  taskSpec:
    params:
    - name: GITLAB_USER
      type: string
      default: rearahhal
    - name: GITLAB_URL
      type: string
      default: "@gitea-url@"
    - name: WEBHOOK_URL
      type: string
      default: "@webhook-url@"
    stepTemplate:
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
    steps:
    - name: init-gitlab
      image: quay.io/siamaksade/python-oc
      env:
      - name: GITLAB_TOKEN
        valueFrom:
          secretKeyRef:
            name: git-auth-secret
            key: token
      script: |
        #!/usr/bin/env python3
        import requests
        import os
        import urllib.parse

        user = "$(params.GITLAB_USER)"
        token = os.environ.get("GITLAB_TOKEN")
        url = "$(params.GITLAB_URL)"
        webhook_url = "$(params.WEBHOOK_URL)"

        headers = {
          "PRIVATE-TOKEN": token,
          "Content-Type": "application/json"
        }

        print(f"## Token: {token} ##")
        def get_project_id(name):
          encoded_name = urllib.parse.quote(f"{user}/{name}", safe='')
          r = requests.get(f"{url}/api/v4/projects/{encoded_name}", headers=headers)
          if r.status_code == 200:
            print(f"Project {name} already exists.")
            return r.json()["id"]
          return None

        def create_project(name, repo_url=None):
          existing_id = get_project_id(name)
          if existing_id:
            return existing_id
          payload = { "name": name }
          if repo_url:
            payload["import_url"] = repo_url
          r = requests.post(f"{url}/api/v4/projects", headers=headers, json=payload)
          if r.status_code not in [200, 201]:
            print(f"Failed to create project {name}: {r.status_code}")
            print(r.text)
            return None
          print(f"Created project: {name}")
          return r.json()["id"]

        def set_default_branch(project_id, branch):
          r = requests.put(f"{url}/api/v4/projects/{project_id}", headers=headers, json={"default_branch": branch})
          if r.status_code not in [200, 201]:
            print(f"Failed to set default branch: {r.status_code}")
            print(r.text)

        def add_webhook(project_id):
          data = {
            "url": webhook_url,
            "push_events": True,
            "merge_requests_events": True,
            "note_events": True
          }
          r = requests.post(f"{url}/api/v4/projects/{project_id}/hooks", headers=headers, json=data)
          if r.status_code not in [200, 201]:
            print(f"Failed to configure webhook: {r.status_code}")
            print(r.text)
          else:
            print("Webhook configured.")

        petclinic_id = create_project("spring-petclinic", "https://gitlab.com/rearahhal/spring-petclinic-pac.git")
        if petclinic_id:
          set_default_branch(petclinic_id, "cicd-demo")
          add_webhook(petclinic_id)

        config_id = create_project("spring-petclinic-config", "https://github.com/rrahhal1/spring-petclinic-config.git")
        if config_id:
          add_webhook(config_id)
