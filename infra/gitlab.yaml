# 1. Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab
  namespace: infra
  labels:
    app: gitlab
    component: gitlab
---
# 2. PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql
  namespace: infra
  labels:
    app: gitlab
    component: postgresql
spec:
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
  selector:
    app: gitlab
    component: postgresql
---
# 3. PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-postgresql
  namespace: infra
  labels:
    app: gitlab
    component: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab
      component: postgresql
  template:
    metadata:
      labels:
        app: gitlab
        component: postgresql
    spec:
      containers:
        - name: postgresql
          image: postgres:12
          env:
            - name: POSTGRES_USER
              value: gitlab
            - name: POSTGRES_PASSWORD
              value: gitlab
            - name: POSTGRES_DB
              value: gitlab
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: gitlab-postgresql-data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            periodSeconds: 20
      volumes:
        - name: gitlab-postgresql-data
          persistentVolumeClaim:
            claimName: gitlab-postgresql-data
---
# 4. Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-redis
  namespace: infra
  labels:
    app: gitlab
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab
      component: redis
  template:
    metadata:
      labels:
        app: gitlab
        component: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          ports:
            - containerPort: 6379
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 10
            periodSeconds: 20
---
# 5. Redis Service
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis
  namespace: infra
  labels:
    app: gitlab
    component: redis
spec:
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  selector:
    app: gitlab
    component: redis
---
# 6. GitLab Service
apiVersion: v1
kind: Service
metadata:
  name: gitlab
  namespace: infra
  labels:
    app: gitlab
    component: gitlab
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: gitlab
    component: gitlab
---
# 7. GitLab Route
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: gitlab
  namespace: infra
  labels:
    app: gitlab
spec:
  to:
    kind: Service
    name: gitlab
  port:
    targetPort: http
---
# 8. GitLab Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab
  namespace: infra
  labels:
    app: gitlab
    component: gitlab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab
      component: gitlab
  template:
    metadata:
      labels:
        app: gitlab
        component: gitlab
      annotations:
        openshift.io/scc: gitlab-scc1  # Use appropriate SCC for your cluster
    spec:
      serviceAccountName: gitlab
      
      initContainers:
        - name: permission-fixer
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Initial permissions:"
              ls -la /etc/gitlab
              echo "Ensuring correct ownership..."
              sudo mkdir -p /etc/gitlab
              sudo chown -R 1000:1000 /etc/gitlab
              sudo chmod -R 775 /etc/gitlab
              echo "Final permissions:"
              ls -la /etc/gitlab
              sudo touch /etc/gitlab/testfile && echo "Write test successful" || echo "Write test failed"
          securityContext:
            runAsUser: 0  # Temporarily run as root to change ownership
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: gitlab-etc
              mountPath: /etc/gitlab
            - name: gitlab-data
              mountPath: /var/opt/gitlab
      containers:
        - name: gitlab
          image: docker.io/gitlab/gitlab-ee:15.0.4-ee.0   #gitlab/gitlab-ce:latest
          ports:
            - containerPort: 8080
          env:
            - name: GITLAB_OMNIBUS_CONFIG
              value: |
                external_url 'http://gitlab-infra.apps.itz-j3yfm1.hub04-lb.techzone.ibm.com'
                nginx['listen_port'] = 8080
                gitlab_rails['redis_host'] = 'gitlab-redis'
                gitlab_rails['db_host'] = 'gitlab-postgresql'
                gitlab_rails['db_password'] = 'gitlab'
                
                # Disable OpenSSH
                openssh['enable'] = false

                # Disable SSH for GitLab shell
                gitlab_rails['gitlab_shell_ssh_port'] = 0
                gitlab_rails['gitlab_shell_ssh_path'] = '/bin/false'

                # Optional: Disable SSH key generation
                gitlab_rails['ssh_host_rsa_key'] = "/dev/null"
                gitlab_rails['ssh_host_dss_key'] = "/dev/null"
                gitlab_rails['ssh_host_ecdsa_key'] = "/dev/null"
                gitlab_rails['ssh_host_ed25519_key'] = "/dev/null"
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1"
          volumeMounts:
            - name: gitlab-etc
              mountPath: /etc/gitlab
            - name: gitlab-data
              mountPath: /var/opt/gitlab
            - name: ssh-override
              mountPath: /etc/ssh   
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: ["CHOWN", "FOWNER", "DAC_OVERRIDE"]
            runAsUser: 1000  # Ensure the container runs as a non-root user
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"
      volumes:
        - name: gitlab-etc
          persistentVolumeClaim:
            claimName: gitlab-etc
        - name: gitlab-data
          persistentVolumeClaim:
            claimName: gitlab-data
        - name: ssh-override
          emptyDir: {}  # Writable in-memory directory to prevent SSH key creation errors
---
# 9. PVC for GitLab Config
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-etc
  namespace: infra
  labels:
    app: gitlab
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# 10. PVC for GitLab Data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-data
  namespace: infra
  labels:
    app: gitlab
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# 11. PVC for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-postgresql-data
  namespace: infra
  labels:
    app: gitlab
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

